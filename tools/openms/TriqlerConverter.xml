<?xml version='1.0' encoding='UTF-8'?>
<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [Utilities]-->
<tool id="TriqlerConverter" name="TriqlerConverter" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@" profile="20.05">
  <description>Converter to input for Triqler</description>
  <macros>
    <token name="@EXECUTABLE@">TriqlerConverter</token>
    <import>macros.xml</import>
    <import>macros_autotest.xml</import>
    <import>macros_test.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in &&
ln -s '$in' 'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)' &&
mkdir in_design &&
ln -s '$in_design' 'in_design/${re.sub("[^\w\-_]", "_", $in_design.element_identifier)}.$gxy2omsext($in_design.ext)' &&
mkdir out &&
#if $adv_opts_cond.adv_opts_selector=='advanced':
  #if $adv_opts_cond.reannotate_filenames:
    mkdir adv_opts_cond.reannotate_filenames &&
    mkdir ${' '.join(["'adv_opts_cond.reannotate_filenames/%s'" % (i) for i, f in enumerate($adv_opts_cond.reannotate_filenames) if f])} && 
    ${' '.join(["ln -s '%s' 'adv_opts_cond.reannotate_filenames/%s/%s.%s' && " % (f, i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($adv_opts_cond.reannotate_filenames) if f])}
  #end if
#end if

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)'
-in_design
'in_design/${re.sub("[^\w\-_]", "_", $in_design.element_identifier)}.$gxy2omsext($in_design.ext)'
-out
'out/output.${gxy2omsext("csv")}'
#if $adv_opts_cond.adv_opts_selector=='advanced':
  #if $adv_opts_cond.reannotate_filenames:
    -reannotate_filenames
    ${' '.join(["'adv_opts_cond.reannotate_filenames/%s/%s.%s'"%(i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($adv_opts_cond.reannotate_filenames) if f])}
  #end if
#end if

## Postprocessing
&& mv 'out/output.${gxy2omsext("csv")}' '$out'
#if "ctd_out_FLAG" in $OPTIONAL_OUTPUTS
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <param name="in" argument="-in" type="data" format="consensusxml" optional="false" label="Input consensusXML with peptide intensities" help=" select consensusxml data sets(s)"/>
    <param name="in_design" argument="-in_design" type="data" format="tabular" optional="false" label="Experimental Design file" help=" select tabular data sets(s)"/>
    <param name="Triqler_condition" argument="-Triqler_condition" type="text" optional="false" value="Triqler_Condition" label="Which column in the condition table should be used for Triqler 'Condition'" help="">
      <expand macro="list_string_san" name="Triqler_condition"/>
    </param>
    <expand macro="adv_opts_macro">
      <param name="reannotate_filenames" argument="-reannotate_filenames" type="data" format="mzml" multiple="true" optional="true" label="Overwrite MS file names in consensusXML" help=" select mzml data sets(s)"/>
      <param name="force" argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overrides tool-specific checks" help=""/>
      <param name="test" argument="-test" type="hidden" optional="false" value="False" label="Enables the test mode (needed for internal use only)" help="">
        <expand macro="list_string_san" name="test"/>
      </param>
    </expand>
    <param name="OPTIONAL_OUTPUTS" type="select" optional="true" multiple="true" label="Optional outputs">
      <option value="ctd_out_FLAG">Output used ctd (ini) configuration file</option>
    </param>
  </inputs>
  <outputs>
    <data name="out" label="${tool.name} on ${on_string}: out" format="csv"/>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>OPTIONAL_OUTPUTS is not None and "ctd_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
  </outputs>
  <tests>
    <expand macro="autotest_TriqlerConverter"/>
    <expand macro="manutest_TriqlerConverter"/>
  </tests>
  <help><![CDATA[Converter to input for Triqler


For more information, visit http://www.openms.de/doxygen/nightly/html/UTILS_TriqlerConverter.html]]></help>
  <expand macro="references"/>
</tool>
